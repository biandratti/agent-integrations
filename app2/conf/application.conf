play.application.loader=TraceApplicationLoader
play.http.secret.key="Ww>LL2L4@MoPEg/4QRrRt=[ZX[LkS6<U^p0Cv@hm:oxVu^/qUDz]x^OsQwmjh9_H"
play.server.http.port=9002

play.filters.hosts {
  allowed = ["."]
}

kamon {

  environment {
    service = "app2"
    host = "auto"
    instance = "auto"
  }

  trace {
    sampler = always
    join-remote-parents-with-same-span-id = yes
  }

  metric {
    tick-interval = 60 seconds
  }

  jaeger {

    # Define the host/port where the Jaeger Collector/Agent is listening.
    host = "jaeger"
    port = 14268

    # Protocol used to send data to Jaeger. The available options are:
    #   - http: Sends spans using jaeger.thrift over HTTP (collector).
    #   - https: Sends spans using jaeger.thrift over HTTPS (collector).
    #   - udp: Sends spans using jaeger.thrift compact over UDP (agent).
    protocol = http

    # for http and https, this is the full url to be used
    http-url = ${kamon.jaeger.protocol}"://"${kamon.jaeger.host}":"${kamon.jaeger.port}"/api/traces"

    # Enable or disable including tags from kamon.environment as labels
    include-environment-tags = no
  }

  instrumentation {
    logback {
      # Controls if and how Context data should be copied into the MDC while events
      # are being logged.
      #
      mdc {
        # MDC keys used to store the current trace and span identifiers. These keys
        # will only be copied if there is a non-empty Span in the Context associated
        # with the logged event.
        trace-id-key = "kamonTraceId"
        span-id-key = "kamonSpanId"

        # Enables copying of Context information into the MDC. Please note that if
        # you only want to include certain Context information in your log patterns
        # you are better off by simply using the conversion rules available under
        # the "tools" package. Copying data into the MDC is required only in cases
        # where third-party tooling expects data from the MDC to be extracted.
        #
        copy {

          # Controls whether Context information should be copied into the MDC
          # or not.
          enabled = yes

          # Controls whether Context tags should be copied into the MDC.
          tags = yes

          # Contains the names of all Context entries that should be copied into
          # the MDC.
          entries = [ ]
        }
      }
    }
  }

  reporters = ["kamon.zipkin.ZipkinReporter"]
}

#kanela.log-level=DEBUG
#kanela.debug-mode=on


kamon.instrumentation.okhttp {

  http-client {
    #
    # Configuration for HTTP context propagation.
    #
    propagation {

      # Enables or disables HTTP context propagation on this HTTP server instrumentation. Please note that if
      # propagation is disabled then some distributed tracing features will not be work as expected (e.g. Spans can
      # be created and reported but will not be linked across boundaries nor take trace identifiers from tags).
      enabled = yes

      # HTTP propagation channel to b used by this instrumentation. Take a look at the kamon.propagation.http.default
      # configuration for more details on how to configure the detault HTTP context propagation.
      channel = "default"
    }

    tracing {

      # Enables HTTP request tracing. When enabled the instrumentation will create Spans for outgoing requests
      # and finish them when the response is received from the server.
      enabled = yes

      # Enables collection of span metrics using the `span.processing-time` metric.
      span-metrics = on

      # Select which tags should be included as span and span metric tags. The possible options are:
      #   - span: the tag is added as a Span tag (i.e. using span.tag(...))
      #   - metric: the tag is added a a Span metric tag (i.e. using span.tagMetric(...))
      #   - off: the tag is not used.
      #
      tags {

        # Use the http.url tag.
        url = span

        # Use the http.method tag.
        method = metric

        # Use the http.status_code tag.
        status-code = metric

        # Copy tags from the context into the Spans with the specified purpouse. For example, to copy a customer_type
        # tag from the context into the HTTP Server Span created by the instrumentation, the following configuration
        # should be added:
        #
        # from-context {
        #   customer_type = span
        # }
        #
        from-context {

        }
      }

      operations {

        # The default operation name to be used when creating Spans to handle the HTTP client requests. The HTTP
        # Client instrumentation will always try to use the HTTP Operation Name Generator configured bellow to get
        # a name, but if it fails to generate it then this name will be used.
        default = "http.client.request"

        # FQCN for a HttpOperationNameGenerator implementation, or ony of the following shorthand forms:
        #   - hostname: Uses the request Host as the operation name.
        #   - method: Uses the request HTTP method as the operation name.
        #
        name-generator = "kamon.okhttp3.instrumentation.OkHttpOperationNameGenerator"
      }
    }
  }
}

kamon {
  okhttp {
    # Fully qualified name of the implementation of kamon.okhttp3.NameGenerator that will be used for assigning names
    # names to Spans.
    name-generator = kamon.okhttp3.DefaultNameGenerator
    # Metrics for okhttp
    metrics {
      enabled = true
    }
  }
}

kanela {
  modules {
    akka.enabled = false
    akka-remote.enabled = false
    okhttp3-module {
      name = "OkHttp 3 Instrumentation Module"
      stoppable = false
      instrumentations = [
        "kamon.okhttp3.instrumentation.OkHttpInstrumentation"
      ]
      within = [
        "okhttp3..*"
      ]
    }
  }
}